ID: 0
Execution stack:
Integer a; Integer b; Integer c; a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
Output:
File Table:
Heap:
ID: 0
Execution stack:
Integer a
Integer b; Integer c; a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
Output:
File Table:
Heap:
ID: 0
Execution stack:
Integer b; Integer c; a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
Integer b
Integer c; a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
Integer c; a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
b(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
Integer c
a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
b(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
a = 1; b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
b(Integer):-> 0
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
a = 1
b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 0
b(Integer):-> 0
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
b = 2; c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 0
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
b = 2
c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 0
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
c = 5; Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
c = 5
Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 0
Output:
File Table:
Heap:
ID: 0
Execution stack:
Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));; print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output:
File Table:
Heap:
ID: 0
Execution stack:
Switch((a * 10))(Case (b * c): print(a); print(b))(Case 10: print(100); print(200))(Default: print(300));
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output:
File Table:
Heap:
ID: 0
Execution stack:
if(((a * 10) == (b * c)))then {print(a); print(b)} else {if(((a * 10) == 10))then {print(100); print(200)} else {print(300)}}
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output:
File Table:
Heap:
ID: 0
Execution stack:
print(a); print(b)
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output:
File Table:
Heap:
ID: 0
Execution stack:
print(a)
print(b)
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output:
File Table:
Heap:
ID: 0
Execution stack:
print(b)
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output: 1
File Table:
Heap:
ID: 0
Execution stack:
print(300)
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output: 12
File Table:
Heap:
ID: 0
Execution stack:
Sym Table:
a(Integer):-> 1
b(Integer):-> 2
c(Integer):-> 5
Output: 12300
File Table:
Heap:
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
{}
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{}
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{}
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@10debf7f}
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@578a6f1b}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@441578dc}
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@77dfcee6}
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@77dfcee6}
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@10f64cb9}
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@10f64cb9}
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@10f64cb9}
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
{1=Model.States.ToySemaphore.Tuple@56f966b1}
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:

ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:

ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:

ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:

ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:

ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:

ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2

ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2

ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@bef3d34
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@6d30f05f
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@67117a7a
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@67117a7a
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@67117a7a
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@64c5c05b
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
1 -> Model.States.ToySemaphore.Tuple@64c5c05b
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[]}, 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, ADT_List{list=[1]}, 1)
ID: 3
Execution stack:
NOP
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 3
Execution stack:
NOP
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 3
Execution stack:
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Integer v; v = 10; fork(v = (v - 1); v = (v - 1); print(v)); Sleep(10); print((v * 10))
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 1
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [3], 1)
ID: 3
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 1
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 1
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 1
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 3
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [1], 1)
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [0], 1)
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [2], 1)
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, [], 1)
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20400399
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Ref(Integer) v1; Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Ref(Integer) v1
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt; new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
Integer cnt
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2); NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
new(v1, 2)
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(0, Integer)
Output:
File Table:
Heap:
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
NewSemaphore(cnt,ReadHeap(v1),1)
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 0
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)); fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt))
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)); Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
fork(Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt))
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
Acquire(cnt); print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt); writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 2
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output:
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 1
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [1])
ID: 0
Execution stack:
Acquire(cnt)
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 1
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
print((ReadHeap(v1) - 1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 20
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 2
Execution stack:
Acquire(cnt)
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [0])
ID: 0
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10)); writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 10))
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 20
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2)); print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
writeHeap(v1, (ReadHeap(v1) * 2))
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 200
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1)); Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
print(ReadHeap(v1))
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Release(cnt)
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [2])
ID: 2
Execution stack:
Sym Table:
cnt(Integer):-> 1
v1(Ref(Integer)):-> Reference(1, Integer)
Output: 2019400
File Table:
Heap:
1(Integer):-> 400
Semaphore Table:
1 -> (2, 1, [])
