     1                                  ; Scrieți un program în limbaj de asamblare care să rezolve expresia aritmetică, considerând domeniile de definiție ale variabilelor
     2                                  ; a - doubleword
     3                                  ; b - byte
     4                                  ; c - word
     5                                  ; x - qword
     6                                  
     7                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     8                                  
     9                                  ; definim punctul de intrare in programul principal
    10                                  global  start 
    11                                  
    12                                  extern  exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
    13                                  import  exit msvcrt.dll; exit este o functie care incheie procesul, este definita in msvcrt.dll
    14                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    15                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    16 00000000 05000000                	a dd 5
    17 00000004 0A                      	b db 10
    18 00000005 0200                    	c dw 2
    19 00000007 0C00000000000000        	x dq 12
    20                                  segment  code use32 class=code ; segmentul de cod
    21                                  
    22                                  ; (a+b/c-1)/(b+2)-x (fara semn) = (5+10/2-1)/(10+2)-12 = 9/12 - 12 = -12
    23                                  
    24                                  start:
    25 00000000 31C0                        xor eax, eax
    26 00000002 31DB                        xor ebx, ebx
    27 00000004 31C9                        xor ecx, ecx
    28 00000006 31D2                        xor edx, edx
    29                                      
    30                                      ;pentru a calcula b/c, convertim b de la byte la doubleword pentru a-l putea imparti la word-ul c
    31 00000008 A0[04000000]            	mov al, [b]
    32 0000000D B400                    	mov ah, 0 ;conversie fara semn de la al la ax
    33 0000000F 66BA0000                	mov dx, 0 ;conversie fara semn de la ax la dx:ax
    34                                  	;dx:ax = b
    35 00000013 66F735[05000000]        	div word [c] ;impartire fara semn dx:ax la c
    36                                  	;ax=b/c
    37                                      
    38 0000001A 8B1D[00000000]              mov ebx, [a]
    39 00000020 01C3                    	add ebx, eax ; ebx = a+b/c
    40                                      
    41 00000022 83EB01                      sub ebx, 1 ; ebx = a+b/c-1
    42 00000025 89D8                        mov eax, ebx
    43                                      
    44 00000027 8A0D[04000000]              mov cl, [b]
    45 0000002D 80C102                      add cl, byte 2 ; cl = b+2
    46                                      
    47 00000030 F7F1                        div ecx ; rezultatul e in eax
    48                                      
    49 00000032 8B1D[07000000]              mov ebx, [x]
    50 00000038 8B15[0B000000]              mov edx, [x+4]
    51                                      
    52 0000003E 31C9                        xor ecx, ecx
    53                                      
    54 00000040 29D8                        sub eax, ebx ; rezultatul e in eax
    55 00000042 83DA00                      sbb edx, 0
    56                                      
    57                                      
    58                                      
    59 00000045 6A00                    push    dword 0      ; push the parameter for exit onto the stack
    60 00000047 FF15[00000000]          call    [exit]       ; call exit to terminate the program 
