     1                                  ; Scrieți un program în limbaj de asamblare care să rezolve expresia aritmetică, considerând domeniile de definiție ale variabilelor
     2                                  ; a - byte
     3                                  ; b - word
     4                                  ; c - double word
     5                                  ; d - qword
     6                                  
     7                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     8                                  
     9                                  ; definim punctul de intrare in programul principal
    10                                  global  start 
    11                                  
    12                                  extern  exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
    13                                  import  exit msvcrt.dll; exit este o functie care incheie procesul, este definita in msvcrt.dll
    14                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    15                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    16 00000000 05                      	a db 5
    17 00000001 0200                    	b dw 2
    18 00000003 0A000000                	c dd 10
    19 00000007 0C00000000000000        	d dq 12
    20                                  segment  code use32 class=code ; segmentul de cod
    21                                  
    22                                  ; (c-a-d)+(c-b)-a (fara semn) = (10-5-12)+(10-2)-5 = -7+8-5 = -4
    23                                  
    24                                  start:
    25 00000000 A1[03000000]                mov eax, [c] ; EAX = 10
    26                                      
    27 00000005 8A1D[00000000]              mov bl, [a] ; mutam a in BL si il extindem
    28 0000000B B700                        mov bh, 0  
    29                                      
    30 0000000D BA00000000                  mov edx, 0
    31 00000012 6689DA                      mov dx, bx
    32 00000015 89D3                        mov ebx, edx
    33                                  
    34 00000017 29D8                        sub eax, ebx ; EAX = c-a
    35                                      
    36 00000019 BB00000000                  mov ebx, 0
    37 0000001E 8B1D[07000000]              mov ebx, [d]
    38 00000024 8B15[0B000000]              mov edx, [d+4] ; il punem pe d in EDX:EBX
    39                                      
    40 0000002A 29D8                        sub eax, ebx ; EAX = c-a-d
    41 0000002C 83DA00                      sbb edx, 0
    42                                      
    43                                      
    44 0000002F 8B0D[03000000]              mov ecx, [c] ; il punem pe c in ECX
    45                                      
    46 00000035 BB00000000                  mov ebx, 0 ; golim registrul
    47 0000003A 668B1D[01000000]            mov bx, [b] 
    48 00000041 BA00000000                  mov edx, 0 ; il convertim pe word[b] la doubleword
    49 00000046 6689DA                      mov dx, bx
    50 00000049 89D3                        mov ebx, edx; b este acum double word
    51                                      
    52 0000004B 29D9                        sub ecx,ebx ; ECX = c-b
    53 0000004D BA00000000                  mov edx, 0 ; se sterge ce era in edx
    54                                      
    55 00000052 01C8                        add eax, ecx ; EAX = (c-a-d)+(c-b)
    56                                      
    57                                      ;se converteste byte[a] la quadword
    58 00000054 BB00000000                  mov ebx, 0
    59 00000059 B900000000                  mov ecx, 0
    60 0000005E 8A1D[00000000]              mov bl, [a]
    61                                      
    62 00000064 29D8                        sub eax, ebx ; EAX = (c-a-d)+(c-b)-a
    63 00000066 83DA00                      sbb edx, 0
    64                                      
    65                                     
    66                                    
    67 00000069 6A00                    push    dword 0      ; push the parameter for exit onto the stack
    68 0000006B FF15[00000000]          call    [exit]       ; call exit to terminate the program  
    69                                      
    70                                      
    71                                      
    72                                      
