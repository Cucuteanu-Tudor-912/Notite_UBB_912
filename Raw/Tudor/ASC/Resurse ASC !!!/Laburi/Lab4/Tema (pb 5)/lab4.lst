     1                                  ;Se dau octetii A si B. Sa se obtina dublucuvantul C:
     2                                  ;   bitii 0-3 ai lui C coincid cu bitii 3-6 ai lui B
     3                                  ;   bitii 4-7 ai lui C au valoarea 0
     4                                  ;   bitii 8-10 ai lui C au valoarea 110
     5                                  ;   bitii 11-15 ai lui C coincid cu bitii 0-4 ai lui A
     6                                  ;   bitii 16-31 ai lui C sunt 1
     7                                  
     8                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     9                                  
    10                                  global  start 
    11                                  
    12                                  extern  exit 
    13                                  import  exit msvcrt.dll
    14                                  segment  data use32 class=data
    15 00000000 A6                      	a db 10100110b ; 1010 0110b = A6h
    16 00000001 ED                      	b db 11101101b ; 1110 1101b = EDh
    17 00000002 00000000                	c dd 0 ; c = (0000 0000) (0000 0000) (0000 0000) (0000 0000)
    18                                     
    19                                  ;   bitii 0-3 ai lui C coincid cu bitii 3-6 ai lui B : c = (0000 0000) (0000 0000) (0000 0000) (0000 1101)
    20                                  ;   bitii 4-7 ai lui C au valoarea 0 : c = (0000 0000) (0000 0000) (0000 0000) (0000 1101)
    21                                  ;   bitii 8-10 ai lui C au valoarea 110 : c = (0000 0000) (0000 0000) (0000 0110) (0000 1101)
    22                                  ;   bitii 11-15 ai lui C coincid cu bitii 0-4 ai lui A : c = (0000 0000) (0000 0000) (0011 0110) (0000 1101)
    23                                  ;   bitii 16-31 ai lui C sunt 1 : c = (1111 1111) (1111 1111) (0011 0110) (0000 1101)
    24                                      
    25                                  segment  code use32 class=code ; segmentul de cod
    26                                  start:
    27                                      ; se pune 0 in fiecare registru
    28 00000000 B800000000                  mov eax, 0
    29 00000005 BB00000000                  mov ebx, 0
    30 0000000A B900000000                  mov ecx, 0
    31 0000000F BA00000000                  mov edx, 0
    32                                  
    33                                      ; vom construi c in EAX, iar, la final, rezultatul va fi mutat in doubleword[c]
    34                                      
    35                                      ;se izoleaza bitii 3-6 ai octetului B
    36 00000014 8A1D[01000000]              mov bl, [b] ;       BL = 1110 1101b
    37 0000001A 80E378                      and bl, 01111000b ; se zerorizeaza tot, cu exceptia bitilor 3-6 // BL = 0110 1000b
    38                                      
    39 0000001D B103                        mov cl, 3 ;         indicam cati biti rotim
    40 0000001F D2CB                        ror bl, cl ;        rotim la dreapta cu 3 pozitii astfel incat sa aliniem continutul bitilor
    41                                      
    42 00000021 09D8                        or eax, ebx ;        punem bitii in rezultat (EAX = 0000000Dh = 0000 0000 0000 0000 0000 0000 0000 1101b)
    43                                      
    44                                      ; pana acum, s-au rezolvat primele doua subpuncte (0-3 = Dh = 1101b si 4-7 = 0h = 0000b)
    45                                      
    46 00000023 BB00000000                  mov ebx, 0
    47 00000028 66BB0600                    mov bx, 0000000000000110b ; BX = 0006h = 0000 0000 0000 0110b
    48                                                                ; gruparea de biti (0110) trebuie sa fie mutati pe bitii 8-11
    49 0000002C 66C1E308                    shl bx, 8                 ; rotim la stanga 8 pozitii (BX = 0000 0110 0000 0000b)
    50 00000030 09D8                        or eax, ebx               ; punem bitii in rezultat (EAX = 0000060Dh = 0000 0000 0000 0000 0000 0110 0000 1101b)
    51                                  
    52                                      ; pana acum, s-au rezolvat primele 3 subpuncte (0-3 = Dh = 1101b // 4-7 = 0h = 0000b // 8-10 = 6 = 0110b)
    53                                      
    54 00000032 BB00000000                  mov ebx, 0
    55 00000037 668B1D[00000000]            mov bx, [a]               ; BX = 0000 0000 1010 0110bb = A6h
    56                                                                ; bitii 1-4 din A (0011) trebuie sa fie mutati pe bitii 11-15 din eax
    57 0000003E 6683E31E                    and bx, 0000000000011110b ; BX = 0000 0000 0000 0110b
    58 00000042 66C1E30B                    shl bx, 11                ; rotim la stanga 11 pozitii (BX = 0011 0000 0000 0000b)
    59 00000046 09D8                        or eax, ebx               ; punem bitii in rezultat (EAX = 0000360Dh = 0000 0000 0000 0000 0011 0110 0000 1101b)
    60                                      
    61                                      ; pana acum, s-au rezolvat primele 4 subpuncte (0-3 = Dh = 1101b // 4-7 = 0h = 0000b // 8-11 = 6h = 0110b // 12-15 = 3h = 0011b)
    62                                      ; se completeaza restul de 16-31 biti din eax cu 1
    63 00000048 0D0000FFFF                  or eax, 11111111111111110000000000000000b 
    64                                      
    65                                      ; punem valoarea din registru in variabila rezultat
    66 0000004D A3[02000000]                mov  [c], eax ; rezultatul tot in eax ramane 
    67                                      
    68 00000052 6A00                    push    dword 0      ; push the parameter for exit onto the stack
    69 00000054 FF15[00000000]          call    [exit]       ; call exit to terminate the program  
    70                                      
